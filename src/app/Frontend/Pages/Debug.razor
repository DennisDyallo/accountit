@page "/debug"
@using System.Text.Json
@using Taxana.Backend.Infrastructure
@using Taxana.Backend.Models
@using Taxana.Backend.Enums
@inject IDexieStore Store
@inject ISchemaService SchemaService

<h3>Taxana Debug Console</h3>

<div class="row mb-3">
    <div class="col">
        <div class="card">
            <div class="card-header">
                Database Operations
            </div>
            <div class="card-body">
                <button class="btn btn-primary me-2" @onclick="InitializeDb">Initialize Database</button>
                <button class="btn btn-danger me-2" @onclick="ResetDb">Reset Database</button>
                <button class="btn btn-info" @onclick="LoadAccounts">Refresh Accounts</button>
            </div>
        </div>
    </div>
</div>

@if (_error != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error:</strong> @_error
        <button type="button" class="btn-close" @onclick="@(() => _error = null)"></button>
    </div>
}

@if (_accounts != null)
{
    <div class="row mb-3">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    Account Statistics
                </div>
                <div class="card-body">
                    <p>Total Accounts: @_accounts.Count</p>
                    <p>VAT Eligible Accounts: @_accounts.Count(a => a.VATEligible)</p>
                    <p>Account Classes:</p>
                    <ul>
                        @foreach (var group in _accounts.GroupBy(a => a.Class).OrderBy(g => g.Key))
                        {
                            <li>@group.Key: @group.Count() accounts</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col">
                    <h5 class="mb-0">BAS Account List</h5>
                </div>
                <div class="col">
                    <input type="text" class="form-control" @bind="@_filter" @bind:event="oninput"
                        placeholder="Filter accounts..." />
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Number</th>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Class</th>
                            <th>VAT Eligible</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var account in FilteredAccounts)
                        {
                            <tr>
                                <td>@account.Number</td>
                                <td>@account.Name</td>
                                <td>@account.Type</td>
                                <td>@account.Class</td>
                                <td>
                                    @if (account.VATEligible)
                                    {
                                        <span class="badge bg-success">Yes</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No</span>
                                    }
                                </td>
                                <td>@account.Balance.ToString("N2") kr</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private string? _error;
    private List<Account>? _accounts;
    private string _filter = "";

    private IEnumerable<Account> FilteredAccounts =>
    _accounts?.Where(a =>
    string.IsNullOrEmpty(_filter) ||
    a.Number.Contains(_filter, StringComparison.OrdinalIgnoreCase) ||
    a.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
    .OrderBy(a => a.Number) ?? Array.Empty<Account>().AsEnumerable();

    private async Task InitializeDb()
    {
        try
        {
            await SchemaService.InitializeAsync();
            await LoadAccounts();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task ResetDb()
    {
        try
        {
            await SchemaService.ResetDatabaseAsync();
            await LoadAccounts();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task LoadAccounts()
    {
        try
        {
            _accounts = (await Store.GetAllAsync<Account>("accounts")).ToList();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }
}